{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["cells","en","de","est","values","App","useState","map","setValues","lng","setLng","useEffect","console","log","className","onClick","role","aria-label","cell","index","oldValues","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAEMA,EAAQ,CACZC,GAAI,CACF,2BACA,6BACA,0BACA,WACA,kBAEFC,GAAI,CACF,8BACA,gCACA,6BACA,cACA,sBAIEC,EAAM,SAAAC,GACV,OAAIA,EAAO,GAAW,GAClBA,EAAO,IACPA,EAAO,IAAMA,EAAO,IAAMA,EAAO,GADf,EAElBA,EAAO,IAAMA,EAAO,IACpBA,EAAO,IAAMA,EAAO,IACpBA,EAAO,GAFwB,EAG/BA,EAAO,IACPA,EAAO,GADW,EAEf,GAqDMC,MAlDf,WAAgB,IAAD,EACeC,mBAASN,EAAK,GAAOO,KAAI,kBAAM,MAD9C,mBACNH,EADM,KACEI,EADF,OAESF,mBAAS,MAFlB,mBAENG,EAFM,KAEDC,EAFC,KAMb,OAHAC,qBAAU,WACRC,QAAQC,IAAI,iBACX,IAED,gCACE,yBAAQC,UAAU,+HAAlB,kBACQX,EAAIC,GACV,yBACEU,UAAU,QACVC,QAAS,WACPL,EAAe,OAARD,EAAe,KAAO,OAHjC,UAMW,OAARA,GACC,sBAAMO,KAAK,MAAMC,aAAW,KAA5B,sCAIO,OAARR,GACC,sBAAMO,KAAK,MAAMC,aAAW,KAA5B,4CAMN,qBAAKH,UAAU,4CAAf,SACGd,EAAMS,GAAKF,KAAI,SAACW,EAAMC,GAAP,OACd,wBACEJ,QAAS,WACP,IAAMK,EAAS,YAAOhB,GACtBgB,EAAUD,IAAUf,EAAOe,GAC3BX,EAAUY,IAEZN,UAAS,4CACPV,EAAOe,GACH,2CACA,+BATR,SAYGD,aC7DEG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0a822c7d.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst cells = {\n  en: [\n    \"depending on management?\",\n    \"depending on another team?\",\n    \"depending on teammates?\",\n    \"complex?\",\n    \"time intesive?\"\n  ],\n  de: [\n    \"DE depending on management?\",\n    \"DE depending on another team?\",\n    \"DE depending on teammates?\",\n    \"DE complex?\",\n    \"DE time intesive?\"\n  ]\n};\n\nconst est = values => {\n  if (values[0]) return 13;\n  if (values[1]) return 8;\n  if (values[2] && values[3] && values[4]) return 8;\n  if (values[2] && values[3]) return 5;\n  if (values[2] && values[4]) return 5;\n  if (values[2]) return 5;\n  if (values[3]) return 2;\n  if (values[4]) return 2;\n  return 1;\n};\n\nfunction App() {\n  const [values, setValues] = useState(cells[\"en\"].map(() => false));\n  const [lng, setLng] = useState(\"en\");\n  useEffect(() => {\n    console.log(\"hello world\");\n  }, []);\n  return (\n    <div>\n      <header className=\"bg-blue-500 border-blue-700 border-b-2 text-white py-4 text-center text-2xl font-semibold relative flex justify-between px-8\">\n        EST: {est(values)}\n        <button\n          className=\"block\"\n          onClick={() => {\n            setLng(lng === \"en\" ? \"de\" : \"en\");\n          }}\n        >\n          {lng === \"de\" && (\n            <span role=\"img\" aria-label=\"DE\">\n              ðŸ‡©ðŸ‡ª\n            </span>\n          )}\n          {lng === \"en\" && (\n            <span role=\"img\" aria-label=\"EN\">\n              ðŸ‡¬ðŸ‡§\n            </span>\n          )}\n        </button>\n      </header>\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 p-6\">\n        {cells[lng].map((cell, index) => (\n          <button\n            onClick={() => {\n              const oldValues = [...values];\n              oldValues[index] = !values[index];\n              setValues(oldValues);\n            }}\n            className={`h-20 bg-gray-200 text-xl border-2 ${\n              values[index]\n                ? \"bg-green-700 text-white border-green-800\"\n                : \"bg-gray-200 border-gray-400\"\n            }`}\n          >\n            {cell}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./main.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}